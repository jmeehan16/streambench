<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<modify version="7.3.8">
    <add generator="gui">
        <schema name="schema:TicksIn">
            <field description="" name="Symbol" type="string"/>
            <field description="" name="SourceTimestamp" type="timestamp"/>
            <field description="" name="BidPrice" type="double"/>
            <field description="" name="AskPrice" type="double"/>
            <field description="" name="FeedName" type="string"/>
        </schema>
        <stream name="TicksIn" schema="schema:TicksIn">
            <property name="description" value="This stream provides a typical market feed and could be modified to support any feed.  Please note that the only field used by the application is the &quot;FeedName&quot; which can be used to distinguish between 2 or more feeds such as NASDAQ and NYSE. &#13;&#10;"/>
            <param name="gui:x" value="-61.0"/>
            <param name="gui:y" value="8.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </stream>
        <box name="LocalTime" type="map">
            <property name="description" value="The operator adds a single field &quot;LocalTime&quot; that has the current time in it. &#13;&#10;"/>
            <input port="1" stream="TicksIn"/>
            <output port="1" stream="out:LocalTime_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="LocalTime">now()</include>
                </expressions>
            </target-list>
            <param name="gui:x" value="49.0"/>
            <param name="gui:y" value="8.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </box>
        <box name="TicksPerSecond" type="aggregate">
            <property name="description" value="The aggregate operator opens a 1 second window for each market feed to determine a tuple count for that feed."/>
            <input port="1" stream="out:LocalTime_1"/>
            <output port="1" stream="out:TicksPerSecond_1"/>
            <param name="dimension-name.0" value="TicksPerSecondDim"/>
            <param name="dimension-type.0" value="value"/>
            <param name="dimension-value.0" value="LocalTime"/>
            <param name="dimension-offset.0" value="0"/>
            <param name="dimension-advance.0" value="1"/>
            <param name="dimension-partial.0" value="no"/>
            <param name="dimension-size.0" value="1"/>
            <param name="dimension-emit-close-first.0" value="false"/>
            <param name="output-group-by" value="true"/>
            <target-list>
                <expressions>
                    <include field="StartOfTimeSlice">openval("TicksPerSecondDim")</include>
                    <include field="TicksPerSecond">count()</include>
                </expressions>
            </target-list>
            <param name="group-by-name.0" value="FeedName"/>
            <param name="group-by.0" value="FeedName"/>
            <param name="gui:x" value="159.0"/>
            <param name="gui:y" value="8.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </box>
        <box name="Mean20s" type="aggregate">
            <property name="description" value="This aggregate operator will open a sliding window per market feed to generate statistics (i.e., mean and standard deviation) for 20 time slices (from the previous aggregate). &#13;&#10;"/>
            <input port="1" stream="out:TicksPerSecond_1"/>
            <output port="1" stream="TickStats"/>
            <param name="dimension-name.0" value="Mean20sDim"/>
            <param name="dimension-type.0" value="value"/>
            <param name="dimension-value.0" value="StartOfTimeSlice"/>
            <param name="dimension-offset.0" value="0"/>
            <param name="dimension-advance.0" value="1"/>
            <param name="dimension-partial.0" value="yes"/>
            <param name="dimension-size.0" value="20"/>
            <param name="dimension-emit-close-first.0" value="false"/>
            <param name="output-group-by" value="true"/>
            <target-list>
                <expressions>
                    <include field="StartOfTimeSlice">openval("Mean20sDim")</include>
                    <include field="AvgTicksPerSecond">avg(TicksPerSecond)</include>
                    <include field="StdevTicksPerSecond">stdev(TicksPerSecond)</include>
                    <include field="LastTicksPerSecond">lastval(TicksPerSecond)</include>
                </expressions>
            </target-list>
            <param name="group-by-name.0" value="FeedName"/>
            <param name="group-by.0" value="FeedName"/>
            <param name="gui:x" value="269.0"/>
            <param name="gui:y" value="8.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </box>
        <box name="SetThreshold" type="map">
            <input port="1" stream="TickStats"/>
            <output port="1" stream="out:SetThreshold_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="AlertThreshold">0.75</include>
                </expressions>
            </target-list>
            <param name="delta-action.0" value="add"/>
            <param name="delta-expression.0" value="0.75"/>
            <param name="delta-mode" value="true"/>
            <param name="delta-name.0" value="AlertThreshold"/>
            <param name="gui:x" value="366.0"/>
            <param name="gui:y" value="111.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </box>
        <output-stream name="TickStats">
            <property name="description" value="This stream provides statistics on the feeds that could be used by a client application to visualize the feed health. &#13;&#10;"/>
            <param name="gui:x" value="453.0"/>
            <param name="gui:y" value="8.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </output-stream>
        <box name="TickFallOffFilter" type="filter">
            <property name="description" value="This filter allows tuples to pass through whenever the tuple count for a second falls below 75% of the average.  This makes sense in a high volume environment where there is a large count per second, but will generate more alerts in a low-volume scenario.  The filtered tuples are dropped (although this can be changed by adding an output port for non-matching tuples).&#13;&#10;&#13;&#10;It's generally recommended to avoid 'magic numbers' like 75%, so this example can be modified to use a Dynamic Variable or a Query instead.  That way the number can be modified via an external source without changing the application itself. &#13;&#10;"/>
            <input port="1" stream="out:SetThreshold_1"/>
            <output port="1" stream="TickFallOffAlert"/>
            <param name="autogen-nomatch-port" value="false"/>
            <param name="expression.0" value="LastTicksPerSecond &lt; AvgTicksPerSecond * AlertThreshold"/>
            <param name="gui:x" value="476.0"/>
            <param name="gui:y" value="111.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </box>
        <output-stream name="TickFallOffAlert">
            <property name="description" value="If an alert occurs in a trading application, that would imply that the feed is stale and shouldn't be trusted.  Therefore, any trading programs should be suspended until the feed health is restored.  In this example, this would need to be done manually, but this monitor could be enhanced to also provide a &quot;health restored&quot; event. &#13;&#10;"/>
            <param name="gui:x" value="586.0"/>
            <param name="gui:y" value="111.0"/>
            <param name="gui:width" value="62.0"/>
            <param name="gui:height" value="62.0"/>
        </output-stream>
    </add>
</modify>
